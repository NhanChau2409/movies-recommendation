generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider            = "typegraphql-prisma"
  output              = "../prisma/generated/type-graphql"
  formatGeneratedCode = "prettier"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model genres {
  id           Int            @id @default(autoincrement())
  genre        String         @db.VarChar(255)
  movie_genres movie_genres[]
}

model movie_genres {
  movie_id Int
  genre_id Int
  genres   genres @relation(fields: [genre_id], references: [id], onDelete: Cascade, map: "fk_movie_genres_genre_id")
  movies   movies @relation(fields: [movie_id], references: [id], onDelete: Cascade, map: "fk_movie_genres_movie_id")

  @@id([movie_id, genre_id], map: "pk_movie_genres")
}

model movies {
  id            Int            @id
  title         String?        @db.VarChar(255)
  release_date  DateTime?      @db.Date
  runtime       Int?
  overview      String?
  popularity    Decimal?       @db.Decimal(10, 2)
  vote_average  Decimal?       @db.Decimal(3, 2)
  vote_count    Int?
  poster_path   String?        @db.VarChar(255)
  backdrop_path String?        @db.VarChar(255)
  movie_genres  movie_genres[]
  ratings       ratings[]
}

model ratings {
  user_id  Int
  movie_id Int
  rating   Float
  movies   movies @relation(fields: [movie_id], references: [id], onDelete: Cascade, map: "fk_rating_movie")
  users    users  @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_rating_user")

  @@id([user_id, movie_id], map: "pk_rating")
}

model users {
  id       Int       @id @default(autoincrement())
  username String    @db.VarChar(50)
  password String    @db.VarChar(50)
  ratings  ratings[]
}

// There will need to manually fix the empty ManyToManyRelation